steps:
- id: pull-base
  name: 'gcr.io/cloud-builders/docker'
  args: ['pull', '${_BASE_IMAGE}']
  waitFor: ['-']

- id: pull-node
  name: 'gcr.io/cloud-builders/docker'
  args: ['pull', '${_NODE_IMAGE}']
  waitFor: ['-']

- id: download_cache
  name: '${_BASE_IMAGE}'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      set -e
      hash=($$(md5sum yarn.lock))
      cache_file=${hash}.tar.gz
      echo "yarn.lock Hash is ${hash}"
      if gsutil ls ${_CACHE_DIR}/${cache_file}; then
        echo "Cache exists. Downloading cache..."
        gsutil cp ${_CACHE_DIR}/${cache_file} - | tar -xzf -
        echo "Cache downloaded."
      else
        echo "Cache not found."
      fi
  waitFor: ['pull-base']

- id: build
  name: '${_NODE_IMAGE}'
  entrypoint: /bin/sh
  args:
    - -c
    - |
      set -e
      if [ -d node_modules ]; then
        echo "Cache exists. Skip dependency build."
      else
        echo "Building dependcies..."
        NODE_ENV=development yarn --frozen-lockfile
        echo "Build complete."
      fi
  waitFor: ['download_cache']

- id: upload_cache
  name: '${_BASE_IMAGE}'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      set -e
      hash=($$(md5sum yarn.lock))
      cache_file=${hash}.tar.gz
      echo "yarn.lock Hash is ${hash}"
      if gsutil ls ${_CACHE_DIR}/${cache_file}; then
        echo "Cache exists. Skip upload."
      else
        echo "Cache not found. Uploading..."
        tar -czf - node_modules | gsutil cp - ${_CACHE_DIR}/${cache_file}
        echo "Cache uploaded."
      fi
  waitFor: ['build']

# build docker image
- id: docker
  name: 'gcr.io/cloud-builders/docker'
  entrypoint: /bin/bash
  args:
    - -c
    - |
      set -e
      docker build -t ${_ARTIFACT_REGISTRY}/${_NAME}:${_DEPLOY_BRANCH} ${_DOCKER_CONTEXT} -f ${_DOCKER_FILE}
      docker push ${_ARTIFACT_REGISTRY}/${_NAME}:${_DEPLOY_BRANCH}
  waitFor: ['build']

# helm deploy
- id: helm
  name: '${_BASE_IMAGE}'
  entrypoint: bash
  args:
    - -c
    - |
      set -e
      if [ -z ${_PR_NUMBER} ] && [ ${BRANCH_NAME} == ${_DEPLOY_BRANCH} ]; then 
        gcloud container clusters get-credentials ${_K8S_CLUSTER} --region ${LOCATION} --project ${PROJECT_ID} --internal-ip
        helm upgrade -i ${_NAME} ${_HELM_CHART} -f ${_HELM_VALUE} --set commitSha=${COMMIT_SHA} -n ${_K8S_NAMESPACE} --wait
      else
        echo "No deployment. This is NOT a branch to deploy."
      fi
  waitFor: ['docker']

options:
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY
  pool:
    name: 'projects/${PROJECT_ID}/locations/${LOCATION}/workerPools/default-pool'

substitutions:
  _NAME: 'spark-xprize-plugin'
  _HELM_CHART: 'oci://us-docker.pkg.dev/u-repo-161-artifact/vatom-artifact-helm-us/vatom-helm-chart'
  _HELM_VALUE: 'helm/values/uat.yaml'
  _BASE_IMAGE: '${_ARTIFACT_REGISTRY}/devops/cloudbuild-base'
  _NODE_IMAGE: 'node:16.15.0-alpine'
  _CACHE_DIR: gs://${PROJECT_ID}_cloudbuild_cache/${REPO_NAME}
  _K8S_CLUSTER: vatom-cluster-gke-u-us-east4-001
  _K8S_NAMESPACE: test
  _DEPLOY_BRANCH: test
  _DOCKER_CONTEXT: .
  _DOCKER_FILE: ${_DOCKER_CONTEXT}/Dockerfile
